// © Orelious
//@version=6
indicator("PSv4.3-ChatGpt", overlay = true)

// === Inputs ===
rsiLength        = input.int(14, "RSI Length")
maLength         = input.int(50, "SMA Length (Trend)")
useCloseOnly     = input.bool(true,  "Signals on Bar Close Only")
use5mAlerts      = input.bool(true,  "Enable 5M Buy/Sell Alerts?")
enableTpSlAlerts = input.bool(false, "Enable TP/SL Hit Alerts?")

// Flex / Reversal
useFlexMode  = input.bool(true, "Enable Flex/Reversal Mode?")
rsiOffset    = input.int(5, "RSI Offset (Flex/Reversal)", minval = 1, maxval = 20)
rsiBuyLevel  = input.int(60, "RSI Buy Threshold (<)")
rsiSellLevel = input.int(40, "RSI Sell Threshold (>)")

// Trend Filter
useTrendFilter = input.bool(true, "Use Trend Filter?")
useEMA         = input.bool(true, "Include EMA in Trend?")
emaLength      = input.int(20, "EMA Length")
trendMode      = input.string("2-of-3", "Trend Mode", options = ["Strict (All 3)", "2-of-3"])

// JPY & Session
useJpyPairs = input.bool(false, "Trade JPY Pairs?")
useSession  = input.bool(true,  "Restrict to London/NY Sessions?")

// Risk/SL/TP
atrLen        = input.int(14, "ATR Length")
atrMult       = input.float(1.5, "ATR Multiplier", step = 0.1)
slMethod      = input.string("ATR", "Stop Method", options = ["Swing", "ATR"])
swingLen      = input.int(10, "Swing Length")
rr            = input.float(2.0, "TP Risk/Reward", step = 0.1)
minSlPips     = input.float(2.0, "Min SL Pips", step = 0.1)
useTrailing   = input.bool(false, "Use Trailing Stop?")
trailMult     = input.float(1.0, "Trail ATR Mult", step = 0.1)
trailActivate = input.float(0.5, "Trail Activate (RR)", step = 0.1)
autoClear     = input.bool(true, "Clear Trade on Hit?")

// Adaptive RR
useAdaptiveRR = input.bool(true,  "Use Adaptive RR on High Vol?")
volAtrMult    = input.float(2.0,  "High-Vol Threshold (ATR×)", step = 0.1)
rrTightFactor = input.float(0.75, "RR Tighten Factor (High Vol)", minval = 0.25, maxval = 1.0, step = 0.05)

// Core Filters
useCoreFilters = input.bool(true, "Enable Core Filters (Vol/MACD/SR/Candle)?")
maxDriftPips   = input.float(5.0, "Max Drift Pips", step = 0.1)
useHtfConfirm  = input.bool(true, "HTF RSI Confirm?")
htfRsiThresh   = input.int(50, "HTF RSI Threshold")

// Bollinger
useBBFilter = input.bool(true, "Use Bollinger Filter?")
bbLength    = input.int(20, "BB Length")
bbMult      = input.float(2.0, "BB Mult")
showBB      = input.bool(true, "Show Bollinger Bands?")

// Alert Spacing
useAlertThreshold    = input.bool(true, "Enforce Min Pips Between Alerts?")
alertFilterThreshold = input.int(10, "Min Pips Between Alerts", minval = 0, step = 1)

// === Core Series ===
basis = ta.sma(close, bbLength)
dev   = ta.stdev(close, bbLength)
upper = basis + bbMult * dev
lower = basis - bbMult * dev
bbBullish = close > basis and close < upper
bbBearish = close < basis and close > lower

tf1 = "240"
tf2 = "60"
tf3 = "5"

src_tf1 = request.security(syminfo.tickerid, tf1, close)
src_tf2 = request.security(syminfo.tickerid, tf2, close)
src_tf3 = request.security(syminfo.tickerid, tf3, close)

rsi_tf1 = ta.rsi(src_tf1, rsiLength)
rsi_tf2 = ta.rsi(src_tf2, rsiLength)
rsi_tf3 = ta.rsi(src_tf3, rsiLength)
sma_tf1 = ta.sma(src_tf1, maLength)
sma_tf2 = ta.sma(src_tf2, maLength)
sma_tf3 = ta.sma(src_tf3, maLength)
ema_tf1 = ta.ema(src_tf1, emaLength)
ema_tf2 = ta.ema(src_tf2, emaLength)
ema_tf3 = ta.ema(src_tf3, emaLength)

bullish_tf1 = src_tf1 > sma_tf1 and (not useEMA or src_tf1 > ema_tf1)
bearish_tf1 = src_tf1 < sma_tf1 and (not useEMA or src_tf1 < ema_tf1)
bullish_tf2 = src_tf2 > sma_tf2 and (not useEMA or src_tf2 > ema_tf2)
bearish_tf2 = src_tf2 < sma_tf2 and (not useEMA or src_tf2 < ema_tf2)
bullish_tf3 = src_tf3 > sma_tf3 and (not useEMA or src_tf3 > ema_tf3)
bearish_tf3 = src_tf3 < sma_tf3 and (not useEMA or src_tf3 < ema_tf3)

allBullish = useTrendFilter ? (bullish_tf1 and bullish_tf2 and bullish_tf3) : true
bearCount  = (bearish_tf1 ? 1 : 0) + (bearish_tf2 ? 1 : 0) + (bearish_tf3 ? 1 : 0)
allBearish = useTrendFilter ? (trendMode == "Strict (All 3)" ? (bearCount == 3) : (bearCount >= 2)) : true

// === Flex/Reversal ===
baseBuy   = allBullish and rsi_tf3 < rsiBuyLevel
baseSell  = allBearish and rsi_tf3 > rsiSellLevel
rsiBuyX   = ta.crossover(rsi_tf3, rsiBuyLevel - rsiOffset)  and rsi_tf3 < rsiBuyLevel
rsiSellX  = ta.crossunder(rsi_tf3, rsiSellLevel + rsiOffset) and rsi_tf3 > rsiSellLevel
flexBuy   = useFlexMode and (rsiBuyX  or (rsi_tf3 < rsiBuyLevel  - rsiOffset))
flexSell  = useFlexMode and (rsiSellX or (rsi_tf3 > rsiSellLevel + rsiOffset))

// === Filters ===
htfConfirmBuy  = not useHtfConfirm or rsi_tf1 < htfRsiThresh
htfConfirmSell = not useHtfConfirm or rsi_tf1 > htfRsiThresh
isJpyPair  = str.contains(syminfo.ticker, "JPY")
pairFilter = not isJpyPair or useJpyPairs
inSession  = not useSession or not na(time(timeframe.period, "0800-2200", "GMT"))

vol_tf3   = request.security(syminfo.tickerid, tf3, volume)
volMA_tf3 = ta.sma(vol_tf3, 20)
volumeSpike = vol_tf3 > volMA_tf3 * 1.5
[macdLine, signalLine, _] = ta.macd(src_tf3, 12, 26, 9)
macdBull = macdLine > signalLine
macdBear = macdLine < signalLine
pivotHigh = ta.pivothigh(high, 5, 5)
pivotLow  = ta.pivotlow(low, 5, 5)
lastPH = ta.valuewhen(not na(pivotHigh), pivotHigh, 0)
lastPL = ta.valuewhen(not na(pivotLow),  pivotLow,  0)
atrVal = ta.atr(atrLen)
nearSRBuy  = not na(lastPL) and math.abs(close - lastPL) <= atrVal * 0.5
nearSRSell = not na(lastPH) and math.abs(close - lastPH) <= atrVal * 0.5
bullEngulf = close > open and close[1] < open[1] and close > open[1] and open < close[1]
bearEngulf = close < open and close[1] > open[1] and close < open[1] and open > close[1]
coreBuyOk  = not useCoreFilters or (volumeSpike and macdBull and nearSRBuy  and bullEngulf)
coreSellOk = not useCoreFilters or (volumeSpike and macdBear and nearSRSell and bearEngulf)

// Drift
pip = syminfo.mintick == 0.00001 ? 0.0001 : syminfo.mintick == 0.001 ? 0.01 : syminfo.mintick
driftPips = math.abs(close - close[1]) / pip
driftOk   = driftPips <= maxDriftPips

// Signals
buyRaw  = (baseBuy  or flexBuy)  and htfConfirmBuy  and coreBuyOk  and (not useBBFilter or bbBullish) and inSession and pairFilter and driftOk
sellRaw = (baseSell or flexSell) and htfConfirmSell and coreSellOk and (not useBBFilter or bbBearish) and inSession and pairFilter and driftOk

if buyRaw and sellRaw
    buyRaw := false
    sellRaw := false
    label.new(bar_index, high, "⚠ Dual Signal", style = label.style_label_left, color = color.orange)

triggerBuy  = buyRaw  and (not useCloseOnly or barstate.isconfirmed)
triggerSell = sellRaw and (not useCloseOnly or barstate.isconfirmed)

// === Trade Engine ===
swingLowPrev  = ta.lowest(low[1],  swingLen)
swingHighPrev = ta.highest(high[1], swingLen)
minAtrFilter  = atrVal > ta.sma(atrVal, 20) * 0.8

avgAtr    = ta.sma(atrVal, 20)
isHighVol = useAdaptiveRR and atrVal > avgAtr * volAtrMult
rrEff     = isHighVol ? rr * rrTightFactor : rr

var bool   tradeActive   = false
var string tradeSide     = ""
var float  tradeEntry    = na
var float  tradeSL       = na
var float  tradeTP       = na
var bool   newTradeLong  = false
var bool   newTradeShort = false

if not tradeActive and minAtrFilter
    newTradeLong := false
    newTradeShort := false
    if triggerBuy
        tradeActive := true
        tradeSide := "BUY"
        tradeEntry := close
        dist = atrVal * atrMult
        swingDist = close - swingLowPrev
        tradeSL := slMethod == "Swing" ? (close - math.max(swingDist, minSlPips * pip)) : (close - math.max(dist, minSlPips * pip))
        tradeTP := close + rrEff * (close - tradeSL)
        newTradeLong := true
    else if triggerSell
        tradeActive := true
        tradeSide := "SELL"
        tradeEntry := close
        dist = atrVal * atrMult
        swingDist = swingHighPrev - close
        tradeSL := slMethod == "Swing" ? (close + math.max(swingDist, minSlPips * pip)) : (close + math.max(dist, minSlPips * pip))
        tradeTP := close - rrEff * (tradeSL - close)
        newTradeShort := true

// === Trailing ===
if useTrailing and tradeActive and not na(tradeEntry)
    trailDist = atrVal * trailMult
    currentRR = tradeSide == "BUY" ? (close - tradeEntry) / (tradeEntry - tradeSL) : (tradeEntry - close) / (tradeSL - tradeEntry)
    if currentRR >= trailActivate
        tradeSL := tradeSide == "BUY" ? math.max(tradeSL, close - trailDist) : math.min(tradeSL, close + trailDist)

// Hits
tpHit = tradeActive and ((tradeSide == "BUY" and close >= tradeTP) or (tradeSide == "SELL" and close <= tradeTP))
slHit = tradeActive and ((tradeSide == "BUY" and close <= tradeSL) or (tradeSide == "SELL" and close >= tradeSL))

if (tpHit or slHit) and autoClear
    tradeActive := false
    tradeSide := ""
    tradeEntry := na
    tradeSL := na
    tradeTP := na
    newTradeLong := false
    newTradeShort := false

// === Alert Spacing ===
var float lastAlertPrice = na
allowAlertBase   = not tradeActive
allowNewDistance = na(lastAlertPrice) or math.abs(close - lastAlertPrice) / pip > alertFilterThreshold
allowAlert       = allowAlertBase and (not useAlertThreshold or allowNewDistance)

// === Timestamp ===
year_str = str.tostring(year(time))
month_str = str.tostring(month(time), "00")
day_str = str.tostring(dayofmonth(time), "00")
hour_str = str.tostring(hour(time, "GMT"), "00")
min_str = str.tostring(minute(time, "GMT"), "00")
sec_str = str.tostring(second(time), "00")
timestamp = year_str + "-" + month_str + "-" + day_str + " " + hour_str + ":" + min_str + ":" + sec_str

// Instrument (OANDA style)
instrument_id = str.replace_all(syminfo.ticker, "OANDA:", "")
instrument_id := str.substring(instrument_id, 0, 3) + "_" + str.substring(instrument_id, 3, 6)

// --- Safe JSON builders ---
f_make_trade_msg(_side, _entry, _sl, _tp, _instr, _ts, _riskpips) =>
    str.format('{{"message":"{0}","entry":{1},"sl":{2},"tp":{3},"instrument":"{4}","timestamp":"{5}","risk_pips":{6}}}', _side, str.tostring(_entry, format.mintick), str.tostring(_sl, format.mintick), str.tostring(_tp, format.mintick), _instr, _ts, str.tostring(_riskpips, "#.#"))

f_make_simple_msg(_side, _instr, _ts, _pips) =>
    str.format('{{"message":"{0}","instrument":"{1}","timestamp":"{2}","est_pnl_pips":{3}}}', _side, _instr, _ts, str.tostring(_pips, "#.##"))

// --- Trade alerts ---
if use5mAlerts and newTradeLong and allowAlert
    entry_val = na(tradeEntry) ? close : tradeEntry
    riskPips  = math.abs(entry_val - tradeSL) / pip
    alert(f_make_trade_msg("BUY", entry_val, tradeSL, tradeTP, instrument_id, timestamp, riskPips), alert.freq_once_per_bar_close)
    lastAlertPrice := close

if use5mAlerts and newTradeShort and allowAlert
    entry_val = na(tradeEntry) ? close : tradeEntry
    riskPips  = math.abs(tradeSL - entry_val) / pip
    alert(f_make_trade_msg("SELL", entry_val, tradeSL, tradeTP, instrument_id, timestamp, riskPips), alert.freq_once_per_bar_close)
    lastAlertPrice := close

// --- TP/SL alerts (optional) ---
estPnl = na(tradeEntry) ? 0 : (tradeSide == "BUY" ? (close - tradeEntry) : (tradeEntry - close)) / pip
if enableTpSlAlerts and tpHit
    alert(f_make_simple_msg("TP", instrument_id, timestamp, estPnl), alert.freq_once_per_bar_close)
if enableTpSlAlerts and slHit
    alert(f_make_simple_msg("SL", instrument_id, timestamp, estPnl), alert.freq_once_per_bar_close)


// === Plots ===
plot(showBB ? upper : na, "BB Upper", color = color.new(color.orange, 40))
plot(showBB ? lower : na, "BB Lower", color = color.new(color.orange, 40))
plot(showBB ? basis : na, "BB Basis", color = color.yellow)
