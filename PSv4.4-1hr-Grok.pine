// (c) Orelious
//@version=6
indicator("PSv4.4-1hr-Aligned (Bridge JSON Match)", overlay = true)

//──────────────────────────────────────────────
// SUMMARY OF CHANGES
//──────────────────────────────────────────────
// • Updated alert JSON to match oanda_bridge.py expected keys.
// • Replaced "timestamp" → "alert_id" (unix via timenow).
// • Replaced "risk_pips" → "risk_pct":1.0.
// • Maintained identical logic, alerts, and structure.
//──────────────────────────────────────────────

// ======================================================
// === INPUTS: CORE SETTINGS ============================
// ======================================================
rsiLength        = input.int(14, "RSI Length")
maLength         = input.int(50, "SMA Length (Trend)")
useCloseOnly     = input.bool(true,  "Signals on Bar Close Only")
use1hAlerts      = input.bool(true,  "Enable 1H Buy/Sell Alerts?")
enableTpSlAlerts = input.bool(false, "Enable TP/SL Hit Alerts?")

// ======================================================
// === FLEX / REVERSAL SETTINGS =========================
// ======================================================
useFlexMode  = input.bool(true, "Enable Flex/Reversal Mode?")
rsiOffset    = input.int(5, "RSI Offset (Flex/Reversal)", minval = 1, maxval = 20)
rsiBuyLevel  = input.int(60, "RSI Buy Threshold (<)")
rsiSellLevel = input.int(40, "RSI Sell Threshold (>)")

// ======================================================
// === TREND FILTER SETTINGS ============================
// ======================================================
useTrendFilter = input.bool(true, "Use Trend Filter?")
useEMA         = input.bool(true, "Include EMA in Trend?")
emaLength      = input.int(20, "EMA Length")
trendMode      = input.string("2-of-3", "Trend Mode", options = ["Strict (All 3)", "2-of-3"])

// ======================================================
// === JPY & SESSION CONTROL ============================
// ======================================================
useJpyPairs = input.bool(false, "Trade JPY Pairs?")
useSession  = input.bool(true,  "Restrict to London/NY Sessions?")

// ======================================================
// === RISK / STOP / TAKE PROFIT SETTINGS ===============
// ======================================================
atrLen        = input.int(14, "ATR Length")
atrMult       = input.float(1.5, "ATR Multiplier", step = 0.1)
slMethod      = input.string("ATR", "Stop Method", options = ["Swing", "ATR"])
swingLen      = input.int(10, "Swing Length")
rr            = input.float(2.0, "TP Risk/Reward", step = 0.1)
minSlPips     = input.float(2.0, "Min SL Pips", step = 0.1)
useTrailing   = input.bool(false, "Use Trailing Stop?")
trailMult     = input.float(1.0, "Trail ATR Mult", step = 0.1)
trailActivate = input.float(0.5, "Trail Activate (RR)", step = 0.1)
autoClear     = input.bool(true, "Clear Trade on Hit?")

// ======================================================
// === ADAPTIVE RISK/REWARD (VOLATILITY) ================
// ======================================================
useAdaptiveRR = input.bool(true,  "Use Adaptive RR on High Vol?")
volAtrMult    = input.float(2.0,  "High-Vol Threshold (ATRx)", step = 0.1)
rrTightFactor = input.float(0.75, "RR Tighten Factor (High Vol)", minval = 0.25, maxval = 1.0, step = 0.05)

// ======================================================
// === CORE FILTERS (VOL / MACD / SR / CANDLE) ==========
// ======================================================
useCoreFilters = input.bool(true, "Enable Core Filters (Vol/MACD/SR/Candle)?")
maxDriftPips   = input.float(5.0, "Max Drift Pips", step = 0.1)

// === NEW: Higher-timeframe direction confirm bundle (RSI+MA) ===
useHtfDirection = input.bool(true, "Use 4H Direction Confirm (RSI<50 & Price<MA for sells, inverse for buys)?")
htfRsiThresh    = input.int(50, "HTF RSI Threshold")

// === NEW: Continuation check (break of prior bar) ===
useContinuation = input.bool(true, "Require Continuation Break (close < low[1] for sell / > high[1] for buy)?")

// ======================================================
// === BOLLINGER FILTER =================================
// (kept - optional)
useBBFilter = input.bool(true, "Use Bollinger Filter?")
bbLength    = input.int(20, "BB Length")
bbMult      = input.float(2.0, "BB Mult")
showBB      = input.bool(true, "Show Bollinger Bands?")

// ======================================================
// === ALERT SPACING ====================================
// (kept - unchanged)
useAlertThreshold    = input.bool(true, "Enforce Min Pips Between Alerts?")
alertFilterThreshold = input.int(10, "Min Pips Between Alerts", minval = 0, step = 1)

// ======================================================
// === TIMEFRAME CONFIGURATION ==========================
// 1H triggers aligned with 4H direction
tf1 = "240"   // 4H directional trend filter
tf2 = "60"    // 1H main trigger timeframe

// ======================================================
// === CORE SERIES CALCULATIONS =========================
// ======================================================
basis = ta.sma(close, bbLength)
dev   = ta.stdev(close, bbLength)
upper = basis + bbMult * dev
lower = basis - bbMult * dev
bbBullish = close > basis and close < upper
bbBearish = close < basis and close > lower

src_tf1 = request.security(syminfo.tickerid, tf1, close)
src_tf2 = request.security(syminfo.tickerid, tf2, close)

rsi_tf1 = ta.rsi(src_tf1, rsiLength)
rsi_tf2 = ta.rsi(src_tf2, rsiLength)
sma_tf1 = ta.sma(src_tf1, maLength)
sma_tf2 = ta.sma(src_tf2, maLength)
ema_tf1 = ta.ema(src_tf1, emaLength)
ema_tf2 = ta.ema(src_tf2, emaLength)

// ======================================================
// === TREND LOGIC ======================================
// ======================================================
bullish_tf1 = src_tf1 > sma_tf1 and (not useEMA or src_tf1 > ema_tf1)
bearish_tf1 = src_tf1 < sma_tf1 and (not useEMA or src_tf1 < ema_tf1)
bullish_tf2 = src_tf2 > sma_tf2 and (not useEMA or src_tf2 > ema_tf2)
bearish_tf2 = src_tf2 < sma_tf2 and (not useEMA or src_tf2 < ema_tf2)

allBullish = useTrendFilter ? (bullish_tf1 and bullish_tf2) : true
allBearish = useTrendFilter ? (bearish_tf1 and bearish_tf2) : true

// ======================================================
// === FLEX / REVERSAL LOGIC ============================
// ======================================================
baseBuy   = allBullish and rsi_tf2 < rsiBuyLevel
baseSell  = allBearish and rsi_tf2 > rsiSellLevel
rsiBuyX   = ta.crossover(rsi_tf2, rsiBuyLevel - rsiOffset)  and rsi_tf2 < rsiBuyLevel
rsiSellX  = ta.crossunder(rsi_tf2, rsiSellLevel + rsiOffset) and rsi_tf2 > rsiSellLevel
flexBuy   = useFlexMode and (rsiBuyX  or (rsi_tf2 < rsiBuyLevel  - rsiOffset))
flexSell  = useFlexMode and (rsiSellX or (rsi_tf2 > rsiSellLevel + rsiOffset))

// ======================================================
// === FILTER LOGIC =====================================
// ======================================================
// volume and MACD on 1H
vol_tf2   = request.security(syminfo.tickerid, tf2, volume)
volMA_tf2 = ta.sma(vol_tf2, 20)
volumeSpike = vol_tf2 > volMA_tf2 * 1.5
[macdLine, signalLine, _] = ta.macd(src_tf2, 12, 26, 9)
macdBull = macdLine > signalLine and macdLine > 0
macdBear = macdLine < signalLine and macdLine < 0

// SR and candle patterns on chart TF (1H)
pivotHigh = ta.pivothigh(high, 5, 5)
pivotLow  = ta.pivotlow(low, 5, 5)
lastPH = ta.valuewhen(not na(pivotHigh), pivotHigh, 0)
lastPL = ta.valuewhen(not na(pivotLow),  pivotLow,  0)
atrVal = ta.atr(atrLen)
nearSRBuy  = not na(lastPL) and math.abs(close - lastPL) <= atrVal * 0.5
nearSRSell = not na(lastPH) and math.abs(close - lastPH) <= atrVal * 0.5
bullEngulf = close > open and close[1] < open[1] and close > open[1] and open < close[1]
bearEngulf = close < open and close[1] > open[1] and close < open[1] and open > close[1]

coreBuyOk  = not useCoreFilters or (volumeSpike and macdBull and nearSRBuy  and bullEngulf)
coreSellOk = not useCoreFilters or (volumeSpike and macdBear and nearSRSell and bearEngulf)

// pair, session, drift
isJpyPair  = str.contains(syminfo.ticker, "JPY")
pairFilter = not isJpyPair or useJpyPairs
inSession  = not useSession or not na(time(timeframe.period, "0800-2200", "GMT"))
pip = syminfo.mintick == 0.00001 ? 0.0001 : syminfo.mintick == 0.001 ? 0.01 : syminfo.mintick
driftPips = math.abs(close - close[1]) / pip
driftOk   = driftPips <= maxDriftPips

// HTF direction bundle (fixes prior sell inversion)
htfBuyOK  = not useHtfDirection or (rsi_tf1 > htfRsiThresh and src_tf1 > (useEMA ? ema_tf1 : sma_tf1))
htfSellOK = not useHtfDirection or (rsi_tf1 < htfRsiThresh and src_tf1 < (useEMA ? ema_tf1 : sma_tf1))

// Continuation break (matches your screenshots)
contBuy  = not useContinuation or close > high[1]
contSell = not useContinuation or close < low[1]

// ======================================================
// === SIGNALS ==========================================
// ======================================================
buyRaw  = (baseBuy  or flexBuy)  and coreBuyOk  and inSession and pairFilter and driftOk and (not useBBFilter or bbBullish) and htfBuyOK  and contBuy
sellRaw = (baseSell or flexSell) and coreSellOk and inSession and pairFilter and driftOk and (not useBBFilter or bbBearish) and htfSellOK and contSell

// Guard dual fire
if buyRaw and sellRaw
    buyRaw := false
    sellRaw := false
    label.new(bar_index, high, "Dual Signal", style = label.style_label_left, color = color.orange)

triggerBuy  = buyRaw  and (not useCloseOnly or barstate.isconfirmed)
triggerSell = sellRaw and (not useCloseOnly or barstate.isconfirmed)

// ======================================================
// === TRADE ENGINE =====================================
// ======================================================
swingLowPrev  = ta.lowest(low[1],  swingLen)
swingHighPrev = ta.highest(high[1], swingLen)
minAtrFilter  = atrVal > ta.sma(atrVal, 20) * 0.8

avgAtr    = ta.sma(atrVal, 20)
isHighVol = useAdaptiveRR and atrVal > avgAtr * volAtrMult
rrEff     = isHighVol ? rr * rrTightFactor : rr

var bool   tradeActive   = false
var string tradeSide     = ""
var float  tradeEntry    = na
var float  tradeSL       = na
var float  tradeTP       = na
var bool   newTradeLong  = false
var bool   newTradeShort = false

if not tradeActive and minAtrFilter
    newTradeLong := false
    newTradeShort := false
    if triggerBuy
        tradeActive := true
        tradeSide := "BUY"
        tradeEntry := close
        dist = atrVal * atrMult
        swingDist = close - swingLowPrev
        tradeSL := slMethod == "Swing" ? (close - math.max(swingDist, minSlPips * pip)) : (close - math.max(dist, minSlPips * pip))
        tradeTP := close + rrEff * (close - tradeSL)
        newTradeLong := true
    else if triggerSell
        tradeActive := true
        tradeSide := "SELL"
        tradeEntry := close
        dist = atrVal * atrMult
        swingDist = swingHighPrev - close
        tradeSL := slMethod == "Swing" ? (close + math.max(swingDist, minSlPips * pip)) : (close + math.max(dist, minSlPips * pip))
        tradeTP := close - rrEff * (tradeSL - close)
        newTradeShort := true

// ======================================================
// === TRAILING STOP LOGIC ==============================
// ======================================================
if useTrailing and tradeActive and not na(tradeEntry)
    trailDist = atrVal * trailMult
    currentRR = tradeSide == "BUY" ? (close - tradeEntry) / (tradeEntry - tradeSL) : (tradeEntry - close) / (tradeSL - tradeEntry)
    if currentRR >= trailActivate
        tradeSL := tradeSide == "BUY" ? math.max(tradeSL, close - trailDist) : math.min(tradeSL, close + trailDist)

// ======================================================
// === TRADE EXIT / RESET ===============================
// ======================================================
tpHit = tradeActive and ((tradeSide == "BUY" and close >= tradeTP) or (tradeSide == "SELL" and close <= tradeTP))
slHit = tradeActive and ((tradeSide == "BUY" and close <= tradeSL) or (tradeSide == "SELL" and close >= tradeSL))

if (tpHit or slHit) and autoClear
    tradeActive := false
    tradeSide := ""
    tradeEntry := na
    tradeSL := na
    tradeTP := na
    newTradeLong := false
    newTradeShort := false

// ======================================================
// === ALERT SPACING ====================================
// ======================================================
// === State Control ===
var float lastAlertPrice = na
allowAlertBase   = not tradeActive
allowNewDistance = na(lastAlertPrice) or math.abs(close - lastAlertPrice) / pip > alertFilterThreshold
allowAlert       = allowAlertBase and (not useAlertThreshold or allowNewDistance)

// ======================================================
// === INSTRUMENT ID FORMAT (OANDA Compatible) ==========
// ======================================================
instrument_id = str.replace_all(syminfo.ticker, "OANDA:", "")
instrument_id := str.substring(instrument_id, 0, 3) + "_" + str.substring(instrument_id, 3, 6)

//──────────────────────────────────────────────
// 🧩 ALERT JSON BUILDERS (Bridge-Compatible)
//──────────────────────────────────────────────
// Function to build trade alert JSON (BUY/SELL)
f_make_trade_msg(_side, _entry, _sl, _tp, _instrument, _timestamp) =>
    str.format('{{"message":"{0}","entry":{1},"sl":{2},"tp":{3},"instrument":"{4}","alert_id":"{5}","risk_pct":1.0}}',
               _side,
               str.tostring(_entry, format.mintick),
               str.tostring(_sl, format.mintick),
               str.tostring(_tp, format.mintick),
               _instrument,
               str.tostring(_timestamp))

// Function to build simple alert JSON (TP/SL hits)
f_make_simple_msg(_side, _instrument, _timestamp, _est_pnl) =>
    str.format('{{"message":"{0}","instrument":"{1}","alert_id":"{2}","entry":0,"sl":0,"tp":0,"risk_pct":1.0}}',
               _side,
               _instrument,
               str.tostring(_timestamp))

// ======================================================
// === ALERTS (JSON OUTPUT) =============================
// ======================================================
// estPnl calc (for reference, not in JSON)
estPnl = na(tradeEntry) ? 0 : (tradeSide == "BUY" ? (close - tradeEntry) : (tradeEntry - close)) / pip

// BUY Alerts
if use1hAlerts and newTradeLong and allowAlert
    entry_val = na(tradeEntry) ? close : tradeEntry
    alert(f_make_trade_msg("BUY", entry_val, tradeSL, tradeTP, instrument_id, timenow), alert.freq_once_per_bar_close)
    lastAlertPrice := close

// SELL Alerts
if use1hAlerts and newTradeShort and allowAlert
    entry_val = na(tradeEntry) ? close : tradeEntry
    alert(f_make_trade_msg("SELL", entry_val, tradeSL, tradeTP, instrument_id, timenow), alert.freq_once_per_bar_close)
    lastAlertPrice := close

// TAKE PROFIT Alert
if enableTpSlAlerts and tpHit
    alert(f_make_simple_msg("TP", instrument_id, timenow, estPnl), alert.freq_once_per_bar_close)

// STOP LOSS Alert
if enableTpSlAlerts and slHit
    alert(f_make_simple_msg("SL", instrument_id, timenow, estPnl), alert.freq_once_per_bar_close)

// ======================================================
// === VISUAL PLOTS =====================================
// ======================================================
plot(showBB ? upper : na, "BB Upper", color = color.new(color.orange, 40))
plot(showBB ? lower : na, "BB Lower", color = color.new(color.orange, 40))
plot(showBB ? basis : na, "BB Basis", color = color.yellow)
